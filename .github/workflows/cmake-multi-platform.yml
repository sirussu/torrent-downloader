name: CMake Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      artifact_path: linux-artifact
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev libssl-dev

      - name: Configure (Linux)
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DPC_INSTALL_DIR=lib/pkgconfig

      - name: Build (Linux)
        working-directory: build
        run: cmake --build . --config Release -j4

      - name: Install (Linux)
        working-directory: build
        run: cmake --install . --config Release --prefix ../install

      - name: Zip Linux Artifact
        run: |
          # Zip only the bin folder contents
          cd install/bin
          zip -r ../../torrent-linux-x64.zip ./*

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: torrent-linux-x64.zip

  build-macos:
    runs-on: macos-latest
    outputs:
      artifact_path: macos-artifact
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
  
      # Setup vcpkg and PIN its commit (no vcpkg.json in your repo needed)
      - name: Setup vcpkg (pinned)
        uses: lukka/run-vcpkg@v11
        with:
          # vcpkg registry release 2025.08.27 (full SHA below)
          vcpkgGitCommitId: 120deac3062162151622ca4860575a33844ba10b
  
      # Install static Boost + OpenSSL for Apple Silicon
      - name: Install deps via vcpkg (static by default on macOS)
        run: |
          "$VCPKG_ROOT/vcpkg" install boost-system openssl --triplet arm64-osx
  
      - name: Configure
        env:
          # Help pkg-config prefer vcpkg if your CMake uses it
          PKG_CONFIG_PATH: "$VCPKG_ROOT/installed/arm64-osx/lib/pkgconfig:$VCPKG_ROOT/installed/arm64-osx/share/pkgconfig"
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DPC_INSTALL_DIR=lib/pkgconfig \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=arm64-osx \
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON \
            -DBoost_USE_STATIC_LIBS=ON \
            -DBoost_NO_SYSTEM_PATHS=ON \
            -DOPENSSL_USE_STATIC_LIBS=TRUE
  
      - name: Build
        working-directory: build
        run: cmake --build . -j4
  
      - name: Install
        working-directory: build
        run: cmake --install . --config Release
  
      # CI gate: fail if any dynamic Boost/OpenSSL sneaks in
      - name: Verify no dynamic Boost/OpenSSL deps
        run: |
          set -euo pipefail
          bad=0
          for b in install/bin/*; do
            [ -x "$b" ] || continue
            echo "Checking $b"
            if otool -L "$b" | grep -E 'libboost_.*\.dylib|libssl\.dylib|libcrypto\.dylib' ; then
              echo "ERROR: $b links to dynamic Boost/OpenSSL" >&2
              bad=1
            fi
          done
          exit $bad
  
      - name: Zip macOS Artifact
        run: |
          cd install/bin
          zip -r ../../torrent-macos-x64.zip ./*
  
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: torrent-macos-x64.zip

  build-windows:
    runs-on: windows-latest
    outputs:
      artifact_path: windows-artifact
    strategy:
      matrix:
        # Only x64 for now (Win32 omitted)
        arch: [x64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Windows)
        shell: pwsh
        run: |
          choco install -y openssl --version=3.4.2

      - name: Install Boost (Windows)
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
          boost_version: 1.83.0
          toolset: msvc
          platform_version: 2022

      - name: Configure (Windows)
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -A "${{ matrix.arch }}" \
            -DCMAKE_INSTALL_PREFIX=../install
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build (Windows)
        working-directory: build
        shell: bash
        run: cmake --build . --config Release -j4

      - name: Install (Windows)
        working-directory: build
        shell: bash
        run: cmake --install . --config Release --prefix ../install

      - name: Zip Windows Artifact
        shell: pwsh
        run: |
          # Compress only the bin folder
          Push-Location $Env:GITHUB_WORKSPACE\install\bin
          Compress-Archive -Path .\* -DestinationPath ../../torrent-win-x64.zip
          Pop-Location

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact-x64
          path: torrent-win-x64.zip

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-artifact
          path: linux-artifact

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-artifact
          path: macos-artifact

      - name: Download Windows x64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-artifact-x64
          path: windows-artifact-x64

      - name: Extract Release Version
        id: extract_release
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "release_version=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-artifact/*.zip
            macos-artifact/*.zip
            windows-artifact-x64/*.zip
          tag_name: ${{ github.ref }}
          name: Release ${{ env.release_version }}
          body: Release ${{ env.release_version }}
          draft: false
          prerelease: false
